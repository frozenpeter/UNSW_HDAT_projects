"ICU Types: Cardiac Surgery Recovery Unit",
"ICU Types: Medical ICU",
"ICU Types: Surgical ICU"),
Number = c(patients_count,
gender_counts["Male"],
gender_counts["Female"],
death_counts,
icu_type_counts["Coronary Care Unit"],
icu_type_counts["Cardiac Surgery Recovery Unit"],
icu_type_counts["Medical ICU"],
icu_type_counts["Surgical ICU"]),
Percentage = c(NA,  # Placeholder for total patients percentage
gender_percentages["Male"],
gender_percentages["Female"],
death_percentage,
icu_type_percentages["Coronary Care Unit"],
icu_type_percentages["Cardiac Surgery Recovery Unit"],
icu_type_percentages["Medical ICU"],
icu_type_percentages["Surgical ICU"])
)
# Use kable to print the table
kable(demographics_table, caption = "Demographics Summary 2", align = c('l', 'r', 'r'), format = "markdown")
# Plotting age distribution by survival status using density curves with filled areas
density_plot <- ggplot(icu_patients_df1_cleaned, aes(x = Age, fill = LR_in_hospital_death, color = LR_in_hospital_death)) +
geom_density(alpha = 0.2) +  # Density plot with transparency; Adjusting the alpha transparency might be necessary to best fit your data visualization preferences.
facet_grid(Gender ~ ICUType, scales = "free", margins = TRUE) +  # Including totals with free scales for each facet
scale_fill_manual(values = c("Survived" = "skyblue", "Died" = "plum")) +  # Manually set colors for fill
scale_color_manual(values = c("Survived" = "skyblue", "Died" = "plum")) +  # Manually set colors for lines
labs(title = "Age Distribution by Survival Status, Gender, and ICU Type",
x = "Age",
y = "Density",
fill = "Survival Status",
color = "Survival Status") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1),  # Enhancing x-axis labels readability
legend.position = "bottom")
# Proportion plot for comparison
proportion_plot <- icu_patients_df1_cleaned %>%
group_by(ICUType, LR_in_hospital_death) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(ICUType) %>%
mutate(Total = sum(Count)) %>%
mutate(Proportion = Count / Total) %>%
ungroup() %>%
ggplot(aes(x = ICUType, y = Proportion, fill = LR_in_hospital_death)) +
geom_bar(stat = "identity", position = position_fill(), width = 0.7) +
scale_fill_manual(values = c("Survived" = "skyblue", "Died" = "plum")) +
labs(title = "Proportion of Survivors and Hospital Deaths by ICU Type",
x = "ICU Type",
y = "Proportion",
fill = "Survival Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
# Combine plots using gridExtra
combined_plot <- grid.arrange(density_plot, proportion_plot, ncol = 2, widths = c(5, 1))
# Define the variables to summarize
variables_to_summarize <- c("Age", "SAPS1", "SOFA", "Albumin_max", "AST_max", "Bilirubin_max", "BUN_max", "Creatinine_max", "GCS_max", "Glucose_max", "HCO3_max",
"HR_diff", "Lactate_max", "Na_diff", "pH_diff", "RespRate_max", "Temp_diff", "Urine_max",
"NISysABP_diff")
# Function to calculate descriptive statistics
calc_descriptives <- function(data, variable) {
summarise(data, Min = min(.data[[variable]], na.rm = TRUE),
Q1 = quantile(.data[[variable]], 0.25, na.rm = TRUE),
Median = median(.data[[variable]], na.rm = TRUE),
Q3 = quantile(.data[[variable]], 0.75, na.rm = TRUE),
Max = max(.data[[variable]], na.rm = TRUE))
}
# Create a summary table for Died and Survived groups
summary_list <- lapply(variables_to_summarize, function(var) {
died_stats <- calc_descriptives(filter(icu_patients_df1_cleaned, in_hospital_death == 1), var)
survived_stats <- calc_descriptives(filter(icu_patients_df1_cleaned, in_hospital_death == 0), var)
cbind(Variable = var, Died = as.matrix(died_stats), Survived = as.matrix(survived_stats))
})
# Combine all summary tables
summary_df <- do.call(rbind, summary_list)
# Convert to data frame for better formatting
summary_df <- data.frame(summary_df)
# Print the table using kable with proper headers
kable(summary_df, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed")) %>%
add_header_above(c(" " = 1, "Died" = 5, "Survived" = 5))
# Respiratory Function Model
resp_model <- glm(in_hospital_death ~ PaO2_max + FiO2_max + RespRate_max,
family = binomial(link = 'logit'), data = icu_patients_df1_cleaned)
summary(resp_model)
# Coagulation & Blood Model
coag_model <- glm(in_hospital_death ~ Platelets_max + pH_min + pH_max + Glucose_max,
family = binomial(link = 'logit'), data = icu_patients_df1_cleaned)
summary(coag_model)
# Liver Function Model
liver_model <- glm(in_hospital_death ~ Bilirubin_max + Albumin_min + ALP_max + ALT_max + AST_max,
family = binomial(link = 'logit'), data = icu_patients_df1_cleaned)
summary(liver_model)
# Cardiovascular System Model
cardio_model <- glm(in_hospital_death ~ HR_max + MAP_max + TroponinI_max + TroponinT_max + Lactate_max +Cholesterol_max,
family = binomial(link = 'logit'), data = icu_patients_df1_cleaned)
summary(cardio_model)
# Central Nervous System Model
cns_model <- glm(in_hospital_death ~ GCS_min,
family = binomial(link = 'logit'), data = icu_patients_df1_cleaned)
summary(cns_model)
# Renal Function Model
renal_model <- glm(in_hospital_death ~ Creatinine_max + Urine_min,
family = binomial(link = 'logit'), data = icu_patients_df1_cleaned)
summary(renal_model)
# Immune System Model
immune_model <- glm(in_hospital_death ~ Temp_max + WBC_max,
family = binomial(link = 'logit'), data = icu_patients_df1_cleaned)
summary(immune_model)
# General Model
general_model <- glm(in_hospital_death ~ Age + Gender + Weight_max + ICUType,
family = binomial(link = 'logit'),
data = icu_patients_df1_cleaned)
summary(general_model)
# Significant Maximum Levels Model (focusing on variables identified as critical)
max_levels_model <- glm(in_hospital_death ~ Albumin_max + AST_max + Bilirubin_max + BUN_max + Creatinine_max + GCS_max + Glucose_max + HCO3_max + Lactate_max + RespRate_max + Urine_max,
family = binomial(link = 'logit'), data = icu_patients_df1_cleaned)
summary(max_levels_model)
# Significant Difference Levels Model (focusing on variables where changes were noted as important)
diff_levels_model <- glm(in_hospital_death ~ HR_diff + Na_diff + pH_diff + Temp_diff + NISysABP_diff,
family = binomial(link = 'logit'), data = icu_patients_df1_cleaned)
summary(diff_levels_model)
# Combined Model incorporating both max and difference values of selected indicators
combined_model <- glm(in_hospital_death ~ Albumin_max + AST_max + Bilirubin_max + BUN_max + Creatinine_max + GCS_max + Glucose_max + HCO3_max + Lactate_max + RespRate_max + Urine_max + HR_diff + Na_diff + pH_diff + Temp_diff + NISysABP_diff + Age + Gender + Weight_max,
family = binomial(link = 'logit'), data = icu_patients_df1_cleaned)
summary(combined_model)
# Creating intact model with all significant predictors
intact_model <- glm(in_hospital_death ~ Age + SAPS1 + SOFA + Albumin_max + ALT_max + AST_max + Bilirubin_max + BUN_max + Cholesterol_max +
Creatinine_max + GCS_max + GCS_min + Glucose_max + HR_diff + Lactate_max + Na_diff +
NISysABP_diff + PaO2_max + pH_diff + pH_min + RespRate_max + Temp_diff + Urine_max +
Urine_min + WBC_max + ICUType,
family = binomial(link = "logit"), data = icu_patients_df1_cleaned)
#summary(intact_model)
# Using stepwise regression to find an optimal set of predictors for intact model
stepwise_result <- stepAIC(intact_model, direction = "both", trace = FALSE) #stepwise_result2 <- stats::step(intact_model,direction="both", trace=0)
# Variance Inflation Factor (VIF) check
vif_values <- vif(stepwise_result, type = 'terms')
#print(vif_values)
summary(stepwise_result)
# Then, our refined model is:
intact_model_rf <- glm(in_hospital_death ~ Age + SAPS1 + SOFA + Albumin_max  + ALT_max + AST_max + Bilirubin_max + BUN_max  + Creatinine_max + GCS_max + GCS_min + HR_diff + Lactate_max + Na_diff + NISysABP_diff + PaO2_max + pH_diff  + Temp_diff + Urine_max + WBC_max + ICUType,
family = binomial(link = "logit"), # for binary dependent variables
data = icu_patients_df1_cleaned)
# Comparing models with ANOVA
anova_results <- anova(intact_model, intact_model_rf, test = "Chisq")
print(anova_results)
# Refit the model dropping high missing level predictor set (remove "Albumin_max" "ALT_max" "AST_max" "Bilirubin_max" "Lactate_max", "NISysABP_diff", "PaO2_max", "pH_diff")
fmodel_df0_1 <- glm(in_hospital_death ~ Age + SAPS1 + SOFA +  BUN_max  + Creatinine_max + GCS_max + GCS_min
+ HR_diff + Na_diff  + Temp_diff + Urine_max + WBC_max + ICUType,
family = binomial(link = "logit"), data = icu_patients_df0_impute)
# Refit the model dropping high missing level and less important predictor set (remove "Na_diff" "WBC_max" "Temp_diff")
fmodel_df0_2 <- glm(in_hospital_death ~ Age + SAPS1 + SOFA +  BUN_max  + Creatinine_max + GCS_max + GCS_min
+ HR_diff  + Urine_max + ICUType,
family = binomial(link = "logit"), data = icu_patients_df0_impute)
# Using stepwise regression to find an optimal set of predictors for intact model
stepwise_df_02 <- stepAIC(fmodel_df0_2, direction = "both", trace = FALSE)
summary(stepwise_df_02)
# Variance Inflation Factor (VIF) check
vif_values <- vif(stepwise_df_02, type = 'terms')
print(vif_values)
# Residuals Plot
plot(residuals(fmodel_df0_2, type = "deviance"), main = "Residuals Plot of fmodel_df0_2", ylab = "Deviance Residuals",
cex.main = 0.8,  # Smaller title font size
cex.lab = 0.6,   # Smaller axis labels font size
cex.axis = 0.6)  # Smaller axis tick labels font size
# Influence Plot (Cookâ€™s Distance)
influencePlot(fmodel_df0_2, main="Influence Plot of fmodel_df0_2", sub="Circle size is proportional to Cook's distance",
cex.main = 0.7,  # Smaller title font size
cex.lab = 0.6,   # Smaller axis labels font size
cex.axis = 0.6)  # Smaller axis tick labels font size
analyze_influential_points <- function(data, indices) {
# Specify the columns of interest
columns_of_interest <- c("Age", "SAPS1", "SOFA", "BUN_max", "Creatinine_max", "GCS_max", "GCS_min", "HR_diff", "Urine_max")
# Calculate summary statistics for the entire dataset for comparison
summary_stats <- sapply(data[, columns_of_interest, drop = FALSE], function(x) {
c(Min = min(x, na.rm = TRUE), Max = max(x, na.rm = TRUE))
})
# Define a threshold for "near" max or min (e.g., within 5%)
threshold <- 0.05
# Function to check if values are at or near the min/max
check_near_min_max <- function(val, min, max) {
list(AtMin = val == min || abs(val - min) <= threshold * abs(min),
AtMax = val == max || abs(val - max) <= threshold * abs(max))
}
# Initialize a list to store results
results <- list()
# Analyze each point
for (index in indices) {
point_data <- data[index, c(columns_of_interest, "in_hospital_death"), drop = FALSE]
survival_status <- ifelse(point_data["in_hospital_death"] == 1, "Died in hospital", "Survivor")
individual_results <- c()
for (var in columns_of_interest) {
val <- point_data[[var]]
min_max_check <- check_near_min_max(val, summary_stats["Min", var], summary_stats["Max", var])
if (min_max_check$AtMin || min_max_check$AtMax) {
individual_results <- c(individual_results, sprintf("Index %d, %s: %f %s",
index, var, val,
ifelse(min_max_check$AtMin, "near/at Min", "near/at Max")))
}
}
if (length(individual_results) > 0) {
individual_results <- c(individual_results, sprintf("Index %d, %s", index, survival_status))
results[[length(results) + 1]] <- individual_results
}
}
# Print results
if (length(results) > 0) {
cat("Significant Values at or near Min/Max:\n")
for (result in results) {
for (line in result) {
cat(line, "\n")
}
}
} else {
cat("No significant values at or near Min/Max found for specified indices.\n")
}
}
# Example usage with specified indices
indices <- c(206, 1118, 1175)  # indices of influential points
analyze_influential_points(icu_patients_df1_cleaned, indices)
# Ensure the data frame used in modeling has no missing values
icu_patients_df0_impute <- na.omit(icu_patients_df0_impute)
# Fit the model
fmodel_df0_1 <- glm(in_hospital_death ~ Age + SAPS1 + SOFA + BUN_max + Creatinine_max + GCS_max + GCS_min + HR_diff + Urine_max + ICUType,
family = binomial(link = "logit"), data = icu_patients_df0_impute)
# Make predictions
pred0_fmodel <- predict(fmodel_df0_1, type = "response")
# Check if the lengths match
if(length(pred0_fmodel) == length(icu_patients_df0_impute$in_hospital_death)) {
print("Lengths match, safe to proceed")
} else {
print("Mismatch in lengths, check data")
}
# Proceed with prediction object creation
pred0_obj_fmodel <- prediction(pred0_fmodel, icu_patients_df0_impute$in_hospital_death)
# Using dplyr to filter out cases where the specified variables are NA
#valid_data0 <- icu_patients_df0 %>% filter(!is.na(SAPS1) & !is.na(GCS_min) & !is.na(Creatinine_max))
# Logistic regression to see the effect of SAPS1 and SOFA scores on in-hospital death
model0_saps1 <- glm(in_hospital_death ~ SAPS1, data = icu_patients_df0_impute, family = binomial)
model0_sofa <- glm(in_hospital_death ~ SOFA, data = icu_patients_df0_impute, family = binomial)
fmodel_df0_1 <- glm(in_hospital_death ~ Age + SAPS1 + SOFA +  BUN_max  + Creatinine_max + GCS_max + GCS_min
+ HR_diff + Na_diff  + Temp_diff + Urine_max + WBC_max + ICUType,
family = binomial(link = "logit"), data = icu_patients_df0_impute)
# Refit the model which dropping high missing level and less important predictor set (remove "Na_diff" "WBC_max" "Temp_diff")
fmodel_df0_2 <- glm(in_hospital_death ~ Age + SAPS1 + SOFA +  BUN_max  + Creatinine_max + GCS_max + GCS_min
+ HR_diff  + Urine_max + ICUType,
family = binomial(link = "logit"), data = icu_patients_df0_impute)
# Predicted probabilities for the models
pred0_saps1 <- predict(model0_saps1, type = "response")
pred0_sofa <- predict(model0_sofa, type = "response")
pred0_fmodel <- predict(fmodel_df0_1, type = "response")
pred0_fmodel_TW <- predict(fmodel_df0_2, type = "response")
# Calculate Brier scores
Brier_model0_saps1 <- mean((pred0_saps1 - icu_patients_df0_impute$in_hospital_death)^2)
Brier_model0_sofa <- mean((pred0_sofa - icu_patients_df0_impute$in_hospital_death)^2)
Brier_fmodel_df0_1 <- mean((pred0_fmodel - icu_patients_df0_impute$in_hospital_death)^2)
Brier_fmodel_df0_3 <- mean((pred0_fmodel_TW - icu_patients_df0_impute$in_hospital_death)^2)
# Print Brier scores
cat("Brier score for SAPS1 Model: ", Brier_model0_saps1, "\n")
cat("Brier score for SOFA Model: ", Brier_model0_sofa, "\n")
cat("Brier score for Final Model: ", Brier_fmodel_df0_1, "\n")
cat("Brier score for Final Model with interaction terms: ", Brier_fmodel_df0_3, "\n")
# Create prediction objects for ROC analysis
pred0_obj_saps1 <- prediction(pred0_saps1, icu_patients_df0_impute$in_hospital_death)
pred0_obj_sofa <- prediction(pred0_sofa, icu_patients_df0_impute$in_hospital_death)
pred0_obj_fmodel <- prediction(pred0_fmodel, icu_patients_df0_impute$in_hospital_death)
pred0_obj_fmodel_TW <- prediction(pred0_fmodel_TW, icu_patients_df0_impute$in_hospital_death)
# Create performance objects for ROC analysis
perf0_saps1 <- performance(pred0_obj_saps1, "tpr", "fpr")
perf0_sofa <- performance(pred0_obj_sofa, "tpr", "fpr")
perf0_fmodel <- performance(pred0_obj_fmodel, "tpr", "fpr")
perf0_fmodel_TW <- performance(pred0_obj_fmodel_TW, "tpr", "fpr")
# Plot ROC curves
plot(perf0_saps1, col = "plum", main = "ROC Curves for SAPS1, SOFA, Re-fit Model and Final Model")
plot(perf0_sofa, col = "skyblue", add = TRUE)
plot(perf0_fmodel, col = "orange", add = TRUE)
plot(perf0_fmodel_TW, col = "lightgreen", add = TRUE)
abline(a = 0, b = 1, lty = 2)
# Add a legend
legend("bottomright", legend = c("SAPS1 Model", "SOFA Model", "Re-fit Model", "Final Model"), col = c("plum", "skyblue", "orange", "lightgreen"), lwd = 2)
# Calculate AUC for SAPS1 model
auc0_saps1 <- performance(pred0_obj_saps1, measure = "auc")
auc0_saps1_value <- auc0_saps1@y.values[[1]]
cat("AUC for SAPS1 Model:", auc0_saps1_value, "\n")
# Calculate AUC for SOFA model
auc0_sofa <- performance(pred0_obj_sofa, measure = "auc")
auc0_sofa_value <- auc0_sofa@y.values[[1]]
cat("AUC for SOFA Model:", auc0_sofa_value, "\n")
# Calculate AUC for Final model
auc0_fmodel <- performance(pred0_obj_fmodel, measure = "auc")
auc0_fmodel_value <- auc0_fmodel@y.values[[1]]
cat("AUC for Re-fit Model:", auc0_fmodel_value, "\n")
# Calculate AUC for Final model with interaction terms
auc0_fmodel_TW <- performance(pred0_obj_fmodel_TW, measure = "auc")
auc0_fmodel_TW_value <- auc0_fmodel_TW@y.values[[1]]
cat("AUC for Final Model:", auc0_fmodel_TW_value, "\n")
# Convert days to years for the survival analysis
icu_patients_df1_cleaned$Years <- icu_patients_df1_cleaned$Days / 365.25
# Filter out the maximum 'Days' value for a clearer histogram via focus on deceased patients
# **In data instraction "ICU stays of less than 48 hours have been excluded.", But I still see the 1 and 2 days value in `Days` variable.
filtered_2days_data <- icu_patients_df1_cleaned %>% filter(Days >= 2)
filtered_days_data <- icu_patients_df1_cleaned %>% filter(Days >= 2 & Days < 2408)
#all(icu_patients_df1_cleaned$Days[icu_patients_df1_cleaned$Status == 'FALSE'] == 2408) #Return TRUE if all entries in icu_patients_df1 where the Status is FALSE have the Days value of 2408.
# Histogram of survival time with density line
ggplot(filtered_days_data, aes(x = Days)) +
geom_histogram(aes(y = after_stat(density)), binwidth = 10, fill = "skyblue", color = "black", alpha = 0.7) +
geom_density(color = "blue") +
labs(title = "Distribution of Survival Time (Days) of Deceased Patients",
x = "Survival Time (Days)",
y = "Density") +
theme_minimal()
# Histogram of patient ages with density line
# Transform the 'Status' logical variable into a factor with levels 'Survived' and 'Died'
icu_patients_df1_cleaned$Survival_Status <- factor(icu_patients_df1_cleaned$Status, levels = c(FALSE, TRUE), labels = c("Survived", "Died"))
ggplot(icu_patients_df1_cleaned, aes(x = Age, y = after_stat(density))) +
geom_histogram(aes(fill = Survival_Status), position = "identity", binwidth = 3, alpha = 0.5, na.rm = TRUE) +
scale_fill_brewer(palette = "Set1", name = "Survival Status") +
geom_density(aes(color = Survival_Status), linewidth = 1, na.rm = TRUE) +
labs(title = "Distribution of Age by Survival Status",
x = "Age",
y = "Density") +
theme_minimal() +
scale_color_brewer(palette = "Set1", name = "Survival Status") +
theme(legend.position = "bottom", # Moving the legend to the bottom
plot.title = element_text(size = 14), # Smaller title font size
axis.title = element_text(size = 12)) # Smaller axis title font size
# Survival status frequency and proportion table
status_table <- table(icu_patients_df1_cleaned$Status)
status_prop <- prop.table(status_table) * 100  # Convert to percentages
status_df <- data.frame(
Status = c("Survived", "Deceased"),
Frequency = as.integer(status_table),
Proportion = sprintf("%.2f%%", status_prop)
)
kable(status_df, caption = "Survival Status of Patients", row.names = FALSE)
# Creating the survival object
surv_obj <- Surv(time = icu_patients_df1_cleaned$Days, event = icu_patients_df1_cleaned$Status)
surv_obj_years <- Surv(time = icu_patients_df1_cleaned$Years, event = icu_patients_df1_cleaned$Status)
# Fitting the Kaplan-Meier survival model
surv_fit <- survfit(surv_obj ~ 1)  # `~ 1` for an overall curve
surv_fit_years <- survfit(surv_obj_years ~ 1, data = icu_patients_df1_cleaned)
surv_fit_ICUtype <- survfit(surv_obj_years ~ ICUType, data = icu_patients_df1_cleaned)
# check the factor levels of the grouping variable (ICU type)
#levels(icu_patients_df1_cleaned$ICUType)
# Plot the overall Kaplan-Meier survival curve
km_plot <- ggsurvplot(
surv_fit_years,
data = icu_patients_df1_cleaned,
conf.int = TRUE,   # Display the confidence interval
risk.table = TRUE, # Display the risk table
xlab = "Time (years)",
ylab = "Proportion Surviving",
title = "Kaplan-Meier Estimate of Survival Function",
ylim = c(0.5, 1),
surv.median.line = "hv",  # Add a horizontal line at the median
ggtheme = theme_minimal() # Use a minimal theme for a cleaner look
)
# Kaplan Meier curve by ICU types
icu_type_mk_plot <- ggsurvplot(
surv_fit_ICUtype,
data = icu_patients_df1_cleaned,
conf.int = TRUE,
censor.size = 2,
risk.table = FALSE,
legend.labs = c("Coronary Care Unit", "Cardiac Surgery Recovery Unit", "Medical ICU", "Surgical ICU"),
ylim = c(0.4, 1.0)
) +
xlab("Survival time (years)") +
ylab("Proportion surviving") +
ggtitle("Kaplan-Meier survival curve over time by ICU type")
# Combine plots using gridExtra
combined_plot <- grid.arrange(km_plot$plot, icu_type_mk_plot$plot, ncol = 2, widths = c(1, 1))
#assess univariate and multivariate model hazard ratios using finalfit() function for numeric variables, stratified by age
dependent_os  <- "Surv(Days, Status)"
explanatory   <- c("strata(Age)", "SAPS1", "SOFA", "Albumin_max", "AST_max", "Bilirubin_max", "BUN_max", "Creatinine_max", "GCS_max", "Glucose_max", "HCO3_max", "HR_diff", "Lactate_max", "Na_diff", "pH_diff", "RespRate_max", "Temp_diff", "Urine_max", "NISysABP_diff")
cox_num_vars <- icu_patients_df1 %>%
finalfit(dependent_os, explanatory, add_dependent_label = FALSE)
cox_num_vars[-2]%>%
rename("Overall survival" = label) %>%
rename("Mean (SD)" = all)  %>%  kbl() %>%   kable_styling()
# In data instraction "ICU stays of less than 48 hours have been excluded.", But I still see the 1 and 2 days value in `Days` variable.
#filtered_2days_data <- icu_patients_df1_cleaned %>% filter(Days >= 2)
cox_model_age <- coxph(Surv(Days, Status) ~ Age, data = icu_patients_df1_cleaned) # not sure if we should exclude < 2 days data as "ICU stays of less than 48 hours have been excluded." data = filtered_2days_data
summary(cox_model_age)
# Fit initial Cox model with Final Model predictor
initial_cox_model <- coxph(Surv(Days, Status) ~ Age + SAPS1 + SOFA +  BUN_max  + Creatinine_max + GCS_max + GCS_min
+ HR_diff  + Urine_max + ICUType,
data = icu_patients_df1_cleaned)
summary(initial_cox_model)
# Check proportional hazards assumption
cox.zph_res <- cox.zph(initial_cox_model)
#print(cox.zph_res)
plot(cox.zph_res) #diagnostic plots
# Perform stepwise selection based on AIC
stepwise_cox_model <- stepAIC(initial_cox_model, direction = "both")
kable(summary(stepwise_cox_model)$coefficients, caption = "Summary of Stepwise Cox Model")
test_proportional_hazards <- cox.zph(stepwise_cox_model) # Assessing proportional hazards assumption
print(test_proportional_hazards) # Check the proportional hazards assumption
#plot(test_proportional_hazards) # Plotting the Schoenfeld residuals to visually inspect any trends over time
ggcoxzph(test_proportional_hazards) # the scaled Schoenfeld residuals along with a smooth curve
# Plot diagnostics
# Compute Schoenfeld residuals
schoenfeld_res <- residuals(stepwise_cox_model, type = "schoenfeld")
# Compute Martingale residuals
martingale_res <- residuals(stepwise_cox_model, type = "martingale")
# Compute deviance residuals
deviance_res <- residuals(stepwise_cox_model, type = "deviance")
# Compute score residuals
score_res <- residuals(stepwise_cox_model, type = "score")
# Plotting Schoenfeld residuals
plot(schoenfeld_res, main = "Schoenfeld Residuals")
# Plotting Martingale residuals
plot(martingale_res, main = "Martingale Residuals")
# Plotting Deviance residuals
plot(deviance_res, main = "Deviance Residuals")
# Plotting Score residuals
plot(score_res, main = "Score Residuals")
# bootstrapping to validate the model (fits a Cox proportional hazards model to a subset of data)
coxph_boot <- function(data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- coxph(Surv(Days, Status) ~ Age + SAPS1 + SOFA + BUN_max  + Creatinine_max + GCS_max + GCS_min + Urine_max + ICUType, data = d)
return(coef(fit)) #returns the coefficients of the fitted model
}
# Bootstrapping with 1000 resamples
results_boot <- boot(icu_patients_df0_cleaned, coxph_boot, R=1000)
plot(results_boot)
# Assuming icu_patients_df0_impute is already filtered and Days and Status are correctly formatted
icu_patients_df0_impute$Days <- as.numeric(icu_patients_df0_impute$Days)
icu_patients_df0_impute$Status <- as.logical(icu_patients_df0_impute$Status)  # Make sure Status is a logical
# Create the survival object
surv_obj <- Surv(time = icu_patients_df0_impute$Days, event = icu_patients_df0_impute$Status)
# Fit a Cox model
cox_model <- coxph(surv_obj ~ Age + SAPS1 + SOFA + BUN_max + Creatinine_max + GCS_max + GCS_min + Urine_max + ICUType,
data = icu_patients_df0_impute)
#summary(cox_model)
# Fit Weibull model using flexsurv package
weibull_model <- flexsurvreg(Surv(Days, Status) ~ Age + SAPS1 + SOFA, data = icu_patients_df0_impute, dist = "weibull")
#print(summary(weibull_model))
# Fit Gompertz model using flexsurv package
gompertz_model <- flexsurvreg(Surv(Days, Status) ~ Age + SAPS1 + SOFA, data = icu_patients_df0_impute, dist = "gompertz")
#print(summary(gompertz_model))
# Define time intervals for Piecewise Constant Hazards model
time_cuts <- c(0, 500, 1000, 1500, 2000, max(icu_patients_df0_impute$Days))
# Fit the Piecewise Constant Hazards model using eha::pchreg
pch_model <- eha::pchreg(surv_obj ~ Age + SAPS1 + SOFA + BUN_max + Creatinine_max + GCS_max + GCS_min + Urine_max + ICUType,
data = icu_patients_df0_impute,
cuts = time_cuts)
#print(summary(pch_model))
# Outputting coefficients from different models
cat("Cox Model Coefficients:\n", paste(names(cox_model$coefficients), cox_model$coefficients, sep = ": ", collapse = "\n "), "\n\n")
cat("Weibull Model Coefficients:\n", paste(names(weibull_model$coefficients), weibull_model$coefficients, sep = ": ", collapse = "\n "), "\n\n")
cat("Gompertz Model Coefficients:\n", paste(names(gompertz_model$coefficients), gompertz_model$coefficients, sep = ": ", collapse = "\n "), "\n\n")
cat("PCH Model Coefficients:\n", paste(names(pch_model$coefficients), pch_model$coefficients, sep = ": ", collapse = "\n "), "\n\n")
# In data instraction "ICU stays of less than 48 hours have been excluded.", But I still see the 1 and 2 days value in `Days` variable.
#filtered_2days_data <- icu_patients_df1_cleaned %>% filter(Days >= 2)
cox_model_age <- coxph(Surv(Days, Status) ~ Age, data = icu_patients_df1_cleaned) # not sure if we should exclude < 2 days data as "ICU stays of less than 48 hours have been excluded." data = filtered_2days_data
summary(cox_model_age)
# Fit initial Cox model with Final Model predictor
initial_cox_model <- coxph(Surv(Days, Status) ~ Age + SAPS1 + SOFA +  BUN_max  + Creatinine_max + GCS_max + GCS_min
+ HR_diff  + Urine_max + ICUType,
data = icu_patients_df1_cleaned)
summary(initial_cox_model)
# Plot diagnostics
# Compute Schoenfeld residuals
schoenfeld_res <- residuals(stepwise_cox_model, type = "schoenfeld")
# Compute Martingale residuals
martingale_res <- residuals(stepwise_cox_model, type = "martingale")
# Compute deviance residuals
deviance_res <- residuals(stepwise_cox_model, type = "deviance")
# Compute score residuals
score_res <- residuals(stepwise_cox_model, type = "score")
# Plotting Schoenfeld residuals
plot(schoenfeld_res, main = "Schoenfeld Residuals")
# Plotting Martingale residuals
plot(martingale_res, main = "Martingale Residuals")
# Plotting Deviance residuals
plot(deviance_res, main = "Deviance Residuals")
# Plotting Score residuals
plot(score_res, main = "Score Residuals")
# Fit initial Cox model to df0 data
initial_cox_model_df0 <- coxph(Surv(Days, Status) ~ Age + SAPS1 + SOFA +  BUN_max  + Creatinine_max + GCS_max + GCS_min + Urine_max + ICUType,
data = icu_patients_df0_cleaned)
summary(initial_cox_model_df0)
# Fit proportional hazards assumption violate Cox model to df0 data
ph_violate_cox_model_df0 <- coxph(Surv(Days, Status) ~ SAPS1 + SOFA + GCS_max + GCS_min + Urine_max + ICUType,
data = icu_patients_df0_cleaned)
summary(ph_violate_cox_model_df0)
# Fit proportional hazards assumption accept Cox model to df0 data
ph_accept_cox_model_df0 <- coxph(Surv(Days, Status) ~ Age + BUN_max + Creatinine_max,
data = icu_patients_df0_cleaned)
summary(ph_accept_cox_model_df0)
# Check proportional hazards assumption
cox.zph_res_df0 <- cox.zph(initial_cox_model_df0)
print(cox.zph_res_df0)
plot(cox.zph_res_df0) #diagnostic plots
#stepwise_cox_model_df0 <- stepAIC(initial_cox_model_df0, direction = "both") # Perform stepwise selection based on AIC
#kable(summary(stepwise_cox_model_df0)$coefficients, caption = "Summary of Stepwise Cox Model")
# bootstrapping to validate the model (fits a Cox proportional hazards model to a subset of data)
coxph_boot <- function(data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- coxph(Surv(Days, Status) ~ Age + SAPS1 + SOFA + BUN_max  + Creatinine_max + GCS_max + GCS_min + Urine_max + ICUType, data = d)
return(coef(fit)) #returns the coefficients of the fitted model
}
# Bootstrapping with 1000 resamples
results_boot <- boot(icu_patients_df0_cleaned, coxph_boot, R=1000)
plot(results_boot)
# In data instraction "ICU stays of less than 48 hours have been excluded.", But I still see the 1 and 2 days value in `Days` variable.
#filtered_2days_data <- icu_patients_df1_cleaned %>% filter(Days >= 2)
cox_model_age <- coxph(Surv(Days, Status) ~ Age, data = icu_patients_df1_cleaned) # not sure if we should exclude < 2 days data as "ICU stays of less than 48 hours have been excluded." data = filtered_2days_data
summary(cox_model_age)
View(immune_model)
