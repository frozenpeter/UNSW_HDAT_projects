/* Description: GP data cleaning */
/* Purpose: SAS code for data cleaning */
/* Written by Group 2 */
/* Date written 01/07/2023-10/07/2023 */

************ Question 1 ************
************ Part 1a: Cleaning and standardising GP data ******;

* Step 1: Assign a library to later save a dataset from the session;
* NOTE: remember to change user ID to uXXXXXXX when running this code;
libname Ass2 "/home/u63486273/HDAT9400/Assignment2";
%include "/home/u63486273/HDAT9400/Assignment2/assignmt2a_formats.sas";

** A copy of the dataset was saved for the purposes of the assignment;
data gp_data;
	set Ass2.assignmt2a_gp_data;
run;

* Step 2: Data exploration;
* Examine the contents of the given dataset;
proc contents data=gp_data;
run;
* all expected variables were present (17 variables, 5837 observations). Expected formats were applied;

* Step 3: Summary statistics;
proc means data=gp_data n mean min max range median missing std;
run;
* On review of the summary statistics generated by the MEANS procedure, there was a notable paucity of observations for variables “age_start” and “age_stop”. There were no obviously illogical ranges present.;

* Step 4i: Data quality check - cleaning and standardising the data according to the updated data dictionary;
data gp_data_cleaned;
set gp_data;

	* a) Sex is coded as 1,2 and M,F, therefore, we need to create a new variable to clean the data;
	if sex in ('M', '1') then sex_clean=1;
	else if sex in ('F','2') then sex_clean=2;
	else sex_clean= .;
	
	* b) Cob is coded as 1,2 therefore we need to make a new variable to clean the data where 99, 998, 999 is considered as missing;
	if cob = 1 then cob_clean=1;
	else if cob = 2 then cob_clean=2;
	else cob_clean = .;
	
	* c) healthcare_card is coded as 0,1 therefore we need to make a new variable to clean the data where 99, 998, 999 is considered as missing;
	if healthcare_card = 0 then healthcare_card_clean=0;
	else if healthcare_card = 1 then healthcare_card_clean=1;
	else healthcare_card_clean= .;
	
	* d) ever_smoked is coded as 0,1 therefore we need to make a new variable to clean the data where 99, 998, 999 is considered as missing;
	if ever_smoked = 0 then ever_smoked_clean=0;
	else if ever_smoked = 1 then ever_smoked_clean=1;
	else ever_smoked_clean= .;
	
	* e) smoke_now is coded as 0,1 therefore we need to make a new variable to clean the data where 99 is considered as missing. ;
	if smoke_now = 0 then smoke_now_clean=0;
	else if smoke_now = 1 then smoke_now_clean=1;
	else smoke_now_clean = .;
	
	* f) age_stop is invalid if < 10 or > 105, if this is case, make value missing. Additionally, for cases where there is a stop year (YYYY) in the age_stop column rather than age (years), age at stopping smoking was calculated ((current age - (data collection year - stopped smoking year));
	if age_stop < 10 then age_stop=.;
	else if age_stop >=1969 then age_stop_clean= age - (2021 - age_stop);	
	else if age_stop > 105 then age_stop=.;
	else age_stop_clean= .;
	
	* g) drinks_day is invalid if >20, if this is case, make value missing;
	if drinks_day > 20 then drinks_day=.;
	
	* h) weight is invalid if <5 or >270, if this is case, make value missing;
	if weight < 5 then weight=.;
	else if weight > 270 then weight=.;
	
	* i) create mapping for reason;
	if reason = 'HEADACHE' then reason_mapped = 1;
	else if reason = "NAUSEA" then reason_mapped = 2;
	else if reason = "TINNITUS" then reason_mapped = 3;
	else if reason = "VOMITING" then reason_mapped = 4;
	else if reason = "ITCHING" then reason_mapped = 5;
	else if reason = "ABDOMINAL PAIN" then reason_mapped = 6;
	else if reason = "DIZZINESS" then reason_mapped = 7;
	else if reason = "SKIN RASH" then reason_mapped = 8;
	else if reason = "PALPITATIONS" then reason_mapped = 9;
	else if reason = "HALLUCINATIONS" then reason_mapped = 10;
run;

* Step 4ii: check new variables with cross tabulation;
proc freq data=gp_data_cleaned;
		table sex*sex_clean /norow nocol nopercent missing;
run;

proc freq data=gp_data_cleaned;
		table cob*cob_clean /norow nocol nopercent missing;
run;

proc freq data=gp_data_cleaned;
		table healthcare_card*healthcare_card_clean /norow nocol nopercent missing;
run;

proc freq data=gp_data_cleaned;
		table ever_smoked*ever_smoked_clean /norow nocol nopercent missing;
run;

proc freq data=gp_data_cleaned;
		table smoke_now*smoke_now_clean /norow nocol nopercent missing;
run;

* Step 4iii: drop old variables and rename edited column names back to original for ease of use;
data gp_data;
set gp_data_cleaned;
drop sex;
drop cob;
drop healthcare_card;
drop ever_smoked;
drop smoke_now;
drop age_stop;
drop reason;
rename sex_clean=sex;
rename cob_clean=cob;
rename healthcare_card_clean=healthcare_card;
rename ever_smoked_clean=ever_smoked;
rename smoke_now_clean=smoke_now;
rename age_stop_clean=age_stop;
rename reason_mapped=reason;
run;

* Step 5: Data quality check - check whether anything is illogical;

* a) Assess whether there are illogical cases where there are patients still smoking but have a stop age recorded;
proc print data=gp_data;
  where smoke_now = 1 and age_stop > 0;
  var ID;
run;

* IDs 860, 873, 1580, 2511, 2562, 3510, 3589, 4505, 4565, 4645, 4702, 4771 (n=12) have inconsistencies where patient is still smoking;
* DECISION: Make smoke_now and age_stop variables missing for these patients as it is not possible to discern which variable is correct;

data gp_data;
	set gp_data; 
	if ID IN (860, 873, 1580, 2511, 2562, 3510, 3589, 4505, 4565, 4645, 4702, 4771) 
	then do
		smoke_now = .;
		age_stop = .; 
	end;
run;

* b) Assess whether there are illogical cases where the patient has never smoked but has start or stop age;
proc print data=gp_data;
	where ever_smoked = 0 and (age_start > 0 or age_stop > 0);
	var ID;
run;
* No observations found;

* c) Assess whether there are illogical cases where there are patients still smoking but claim to have never smoked;
proc print data=gp_data;
	where smoke_now = 1 and ever_smoked = 0;
	var ID;
run; 
* No observation found;

* d) Check interestingly low heights to see if this is because they belong to children;
proc freq data=gp_data;
    where height < 1.4 and height not is null; 
	table(age);
run; 
* Ages of people below 1.4m in height are between 1 and 13. This is completely reasonable.;

* e) Check interestingly low weights to see if this is because they belong to children;
proc freq data=gp_data;
    where weight < 30 and weight not is null; 
	table(age);
run; 
* Ages of people below 80 in weight are between 1 and 13. Again, this is completely reasonable.;


* Step 6: drop exact duplicates;
proc sort data=gp_data  DUPOUT=gp_data_exact_dup_excl   NODUPKEY  OUT=gp_data_wo_exact_dup;
	by _ALL_;
run;

* Step 7: drop partial duplicates (same patient id);
proc sort data=gp_data_wo_exact_dup  DUPOUT=dup_id   NODUPKEY  OUT=gp_data_wo_partial_dup;
	by ID;
run;

* Check partial duplicates;
proc print data=dup_id;
var ID;
run;

* IDs 1, 52, 152, 243, 858, 977, 1474, 1565, 1848, 1945, 2519, 2682, 2781, 2845, 2887, 2897, 3059, 3174, 3520, 3742, 3965, 4114, 4333, 4348, 4705, 4775, 4900, 4916, 5452, 5484, 5502 are partial duplicates - check their records now;
proc print data=gp_data_wo_exact_dup noobs;
	where ID IN (1, 52, 152, 243, 858, 977, 1474, 1565, 1848, 1945, 2519, 2682, 2781, 2845, 2887, 2897, 3059, 3174, 3520, 3742, 3965, 4114, 4333, 4348, 4705, 4775, 4900, 4916, 5452, 5484, 5502); /*some info is the same, other is different*/
run;
* manually reviewing the partial duplicates, the majority of cases were similar with one set of the pair having more complete data than the other. However, looking at ID 2897, there is conflict between the observations. It is not possible to discern which duplicate is more correct.
* DECISION - delete all records for partial duplicates with the same patient_ID;

data gp_data;
	set gp_data_wo_exact_dup; /* This dataset does not include exact duplicates */
	where ID NOT IN (1, 52, 152, 243, 858, 977, 1474, 1565, 1848, 1945, 2519, 2682, 2781, 2845, 2887, 2897, 3059, 3174, 3520, 3742, 3965, 4114, 4333, 4348, 4705, 4775, 4900, 4916, 5452, 5484, 5502); /* exclude partial duplicate records of IDs */
run;

* Step 8: perform missing values analysis for continuous variables;
* a) Create month variable in seperate dataset to check if there's a missingness pattern with month;
data gp_data_month_incl;
    set gp_data;
    gp_last_month = month(GP_last);
run;

proc freq data=gp_data_month_incl;
	table (age_start age_stop drinks_day height weight syst_bp diast_bp cob healthcare_card ever_smoked smoke_now) * gp_last_month /nocol norow nopercent missing;
run; 
* Missing values for variables are distributed evenly across months (1-10) so no patterns of missing values found.

* Step 9: repeat descriptive statistics and summary information of final cleaned GP data;
* analyse all numeric variables;
proc means data=gp_data n mean min max range median nmiss std;
var _numeric_;
run;
* age_start and age_stop have >90% missingness but keep incase they may hold relevant signals.;

* Save the cleaned GP dataset as gp_data_part_a.sas7bdat in the same folder;
libname output "/home/u63486273/HDAT9400/Assignment2/";
data output.gp_data_part_a;
   set gp_data;
run;
* Clear the output library reference;
libname output clear;




************ Part B: Cleaning and standardising ED data ************;
* Step 1: Load the data;

data ed_data;
	set Ass2.assignmt2a_ed_data;
run;

* Step 2: Data Exploration;
* View the contents of the dataset;
proc contents data=ed_data;
run;

* Step 3: Summary statistics;
proc means data=ed_data n nmiss mean min max median range std;
run;

*Step 4: Cleaning and Standardising the data according to data dictionary;
data ed_data_cleaned;
set ed_data;

	* a) Data dictionary states that ed_admission date must be between 01/01/2014 and 31/12/2014;
	* b) Data dictionary states that ed_separation date must be between 01/01/2014 and 31/12/2014;
	where ed_admission >= '01JAN2014'd and ed_admission <= '31DEC2014'd and ed_separation >= '01JAN2014'd and ed_separation <= '31DEC2014'd;

    * 27101 observations were found to be from visits outside of the timeframe stipulated in the data dictionary, as such associated datapoints are outside the time frame of interest for the study. It was thus decided to remove these entries;

	* c) Clean sex_ed variable;
	if sex_ed in ('Male', 'M', '1') then sex_ed_clean = 1;
	else if sex_ed in ('Female', 'F', '2') then sex_ed_clean = 2;
	else sex_ed_clean = '.';

	* d) Clean cob_ed variable;
	if cob_ed in ('Australia', '1') then cob_ed_clean = 1;
	else if cob_ed in ('Overseas', '2') then cob_ed_clean = 2;
	else cob_ed_clean = '.'; 

	* e) Clean interpreter variable;
	if interpreter in ('No', '0') then interpreter_clean = 0;
	else if interpreter in ('Yes', '1') then interpreter_clean = 1;
	else interpreter_clean = '.'; 

	* f) Clean health_insurance variable;
	if health_insurance in ('No', '0') then health_insurance_clean = 0;
	else if health_insurance in ('Yes', '1') then health_insurance_clean = 1;
	else health_insurance_clean = '.';

	* g) Clean triage_category variable;
	if triage_category in ('Resuscitation', '1') then triage_category_clean = 1;
	else if triage_category in ('Emergency', '2') then triage_category_clean = 2;
	else if triage_category in ('Urgent', '3') then triage_category_clean = 3;
	else if triage_category in ('Semi urgent', '4') then triage_category_clean = 4;
	else if triage_category in ('Non urgent', '5') then triage_category_clean = 5;
	else triage_category_clean = '.'; 

	* h) Clean separation_mode variable;
	if separation_mode in ('Admitted to hospital', '1') then separation_mode_clean = 1;
	else if separation_mode in ('Departed ED', '2') then separation_mode_clean = 2;
	else if separation_mode in ('Died in ED', '3') then separation_mode_clean = 3;
	else if separation_mode in ('Dead on arrival', '4') then separation_mode_clean = 4;
	else separation_mode_clean = '.';
run;

*Step 5: Drop and rename edited columns;
data ed_data_cleaned;
set ed_data_cleaned; 
	drop sex_ed;
	drop cob_ed;
	drop interpreter;
	drop health_insurance;
	drop triage_category;
	drop separation_mode;
	rename sex_ed_clean = sex_ed;
	rename cob_ed_clean = cob_ed;
	rename interpreter_clean = interpreter;
	rename health_insurance_clean = health_insurance;
	rename triage_category_clean = triage_category;
	rename separation_mode_clean = separation_mode;
run;

proc contents data=ed_data_cleaned;
run;

*Step 6: remove exact duplicates;
proc sort data=ed_data_cleaned  DUPOUT=ed_data_exact_dup_excl   NODUPKEY  OUT=ed_data_wo_exact_dup;
	by _ALL_;
run;

* Step 7: Sort the dataset by ID;
proc sort data=ed_data_wo_exact_dup;
  by id;
run;

* Step 8: Remove visits from patients where they have inconsistent sex or country of birth as it is not possible to distinguish which result is correct;
* Also remove visits where there are more than 2 ages for a patient as they cannot have aged so quickly within 1 year;

proc sql;
create table ed_data_cleaned as
select *
from ed_data_wo_exact_dup
where id not in (
    select id
    from ed_data_wo_exact_dup
    group by id 
    having count(distinct sex_ed) > 1 or count(distinct cob_ed) > 1 or count(distinct age_ed) > 2
);
quit;

* Save the cleaned ED dataset as ed_data_cleaned.sas7bdat in the same folder;
libname output "/home/u63486273/HDAT9400/Assignment2/";
data output.ed_data_cleaned;
   set ed_data_cleaned;
run;
* Clear the output library reference;
libname output clear;



************ Part C: Creating new variables on GP data ************;
* Only create variables for age >= 18 as per instructions;

* Step 1: save a new copy of the dataset of this part;
data gp_data;
set gp_data;

* Step 2: create new variables in line with the data dictionary;
	* Create smoke status variable;
	if ever_smoked = 0 and age >= 18 then smoke_status_GP = 0; * `ever_smoked = 0` also ensures that neither age_start or age_stop are set as per the earlier check;
	else if smoke_now = 1 and age >= 18 then smoke_status_GP = 1; * Can't infer from having a age_start but not a age_stop means they are still smoking as data could be missing. It is better to be sure of current smoker and leave the dubious case as missing.;
	else if age_stop > 0 or (ever_smoked = 1 and smoke_now = 0) and age >= 18 then smoke_status_GP = 2; * `age_stop > 0` also ensures that patient isn't a current smoker as per the earlier check;

	* Create risky alcohol variable;
	if drinks_day = . then risky_alcohol_GP = .;
	else if drinks_day <= 2 and age >= 18 then risky_alcohol_GP = 0;
	else if drinks_day > 2  and age >= 18 then risky_alcohol_GP = 1;
	
	* Create BMI_GP variable according to formula;
	if age < 18 then BMI_GP = .;
	else BMI_GP = weight / (height ** 2);
	
	* Create obese_GP  variable based off BMI_GP variable;
	if BMI_GP = . then obese_GP = .;
	else if BMI_GP < 30 and age >= 18 then obese_GP = 0;
	else if BMI_GP >= 30 and age >= 18 then obese_GP = 1;
	
	* Create highBP_GP variable;
	if syst_bp = . or diast_bp = . then highBP_GP = .;
	else if syst_bp < 135 and diast_bp < 85 and age >= 18 then highBP_GP = 0;
	else if syst_bp >= 135 or diast_bp >= 85 and age >= 18 then highBP_GP = 1;

run;

* Save the cleaned GP dataset as gp_data_part_c.sas7bdat in the same folder;
libname output "/home/u63486273/HDAT9400/Assignment2/";
data output.gp_data_part_c;
   set gp_data;
run;
* Clear the output library reference;
libname output clear;




************ Question 2: Research question ******;

*Step 1: Summary statistics;
* descriptive statistics of variables to identify overarching trends/explore data;
* the newly created variables in Question 1 are carried through. Notably, they include only individuals over the age of 18. These lifestyle factors are more relevant to this age group so the variables have not been recoded for Question 2 analysis.
proc means data=gp_data n mean min max range median missing std;
run;

*Step 2: Analysis of age. Age groups are created for ease of analysis and visualisation of trends;
proc format;
value agebucket
0-20 = "<=20"
21-40 = "21-40"
41-60 = "41-60"
61-80 = "61-80"
81-120 = ">80";
run;

proc freq data=gp_data;
tables age;
format age agebucket.;
run;

proc univariate data=gp_data;
	var age;
    histogram age;
run;
* majority of Sunnydale population sampled are middle-aged. 50.3% of patients are aged between 41-60 years of age;
* Symmetric distribution around median of 45 years of age;

*Step 3: analysis of sex ;
proc freq data=gp_data;
tables sex;
proc univariate data=gp_data;
	var sex;
	histogram sex;
run;

*Step 4: analysis of BMI ;
proc univariate data=gp_data;
	var BMI_GP;
	histogram BMI_GP;
run;

*Step 5: analysis of country of birth ;
proc freq data=gp_data;
tables cob;
proc univariate data=gp_data;
	var cob;
	histogram cob;
run;

*Step 6: analysis of healthcare card status ;
proc freq data=gp_data;
tables healthcare_card;
proc univariate data=gp_data;
	var healthcare_card;
	histogram healthcare_card;
run;

*Step 7: Analysis of demographic information by age;
proc freq data=gp_data;
	tables age* (sex cob healthcare_card);
	format age agebucket.;
run;

*Step 8: Analysis of drinking per day. ~45% of patients have at least 1 drink a day;
proc format;
value drinksbucket
0 = "0"
1 = "1"
2 = "2"
3 = "3"
4 = "4"
5-20 = "5+";
run;

proc freq data=gp_data;
tables drinks_day;
format drinks_day drinksbucket.;
run;

proc univariate data=gp_data;
	var drinks_day;
    histogram drinks_day;
run;

proc freq data=gp_data;
	table (drinks_day) /nocol norow maxlevels=5;
run; 

*Step 9: Recoding for ease of analysis;
data gp_data_analysis;
set gp_data;

if obese_GP = 0 then obese_GP_text = 'No';
else if obese_GP = 1 then obese_GP_text = 'Yes';
drop obese_GP;
rename obese_GP_text = obese_GP;

if smoke_status_GP = 0 then smoke_status_GP_text = 'Never';
else if smoke_status_GP = 1 then smoke_status_GP_text = 'Current';
else if smoke_status_GP = 2 then smoke_status_GP_text = 'Ex';
drop smoke_status_GP;
rename smoke_status_GP_text = smoke_status_GP;

if risky_alcohol_GP = 0 then risky_alcohol_GP_text = 'No';
else if risky_alcohol_GP = 1 then risky_alcohol_GP_text = 'Yes';
drop risky_alcohol_GP;
rename risky_alcohol_GP_text = risky_alcohol_GP;
	
if highBP_GP = 0 then highBP_GP_text = 'Normal';
else if highBP_GP = 1 then highBP_GP_text = 'High';
drop highBP_GP;
rename highBP_GP_text = highBP_GP;

run;

*Step 10: Analysis of smoking status;
proc freq data=gp_data;
tables smoke_status_GP;
proc univariate data=gp_data;
	var smoke_status_GP;
	histogram smoke_status_GP;
	
proc freq data=gp_data;
tables age_start;
proc univariate data=gp_data;
	var age_start;
	histogram age_start;
	
proc freq data=gp_data;
tables age_stop;
proc univariate data=gp_data;
	var age_stop;
	histogram age_stop;
run;

*Step 11: Analysis of alcohol intake;
proc freq data=gp_data;
tables risky_alcohol_GP;
proc univariate data=gp_data;
	var risky_alcohol_GP;
	histogram risky_alcohol_GP;
run;

*Step 12: Analysis of BMI;
proc freq data=gp_data;
tables obese_GP;
proc univariate data=gp_data;
	var obese_GP;
	histogram obese_GP;
run;

*Step 13: Analysis of hypertensive status;
proc freq data=gp_data;
tables highBP_GP;
proc univariate data=gp_data;
	var highBP_GP;
	histogram highBP_GP;
run;

*Step 14: Analysis of relationship between variables;
proc freq data=gp_data_analysis;
	tables age* (obese_GP smoke_status_GP risky_alcohol_GP highBP_GP);
	format age agebucket.;
    tables sex*(obese_GP smoke_status_GP risky_alcohol_GP highBP_GP);
    tables smoke_status_GP*(obese_GP risky_alcohol_GP highBP_GP);
    tables obese_GP*(smoke_status_GP risky_alcohol_GP highBP_GP);
    tables cob*(obese_GP smoke_status_GP risky_alcohol_GP highBP_GP);
run; 
